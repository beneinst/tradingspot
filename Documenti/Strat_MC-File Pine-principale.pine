// This Pine Script® code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © gerardo_dorrico

//@version=6
indicator('💫 Strategia Multi-Confluenza', shorttitle = '💫 StratMC', overlay = true, max_labels_count = 500, max_lines_count = 500, max_bars_back = 500)

// ========== INIZIALIZZA VARIABILI ==========

var label[] pivot_labels = array.new<label>()
var label[] priceaction_labels = array.new<label>()

var bool last_signal_buy = false
var bool timer_active_new = false
var bool timer_expired_new = false
var string timer_status_new = "Inattivo"

// Input per la lunghezza dei pivot e opzioni di visualizzazione
length = input.int(9, 'Lunghezza Pivot', group = 'Punti Pivot')
show_reg = input.bool(true, 'Pivot Regolari', inline = 'inline1', group = 'Punti Pivot')
reg_ph_css = input.color(#ef5350, 'Massimo', inline = 'inline1', group = 'Punti Pivot')
reg_pl_css = input.color(#26a69a, 'Minimo', inline = 'inline1', group = 'Punti Pivot')

// Variabili globali per i pivot
var float recent_ph = na
var float recent_pl = na
var int recent_ph_bar = na
var int recent_pl_bar = na


// ========== PARAMETRI INPUT ==========

extendRightInput = input.bool(true, "Estendi a destra", group="Visualizzazione")
extendLeftInput  = input.bool(false, "Estendi a sinistra", group="Visualizzazione")

showSignals = input.bool(true, 'Mostra Segnali di Trading', group='Visualizzazione Segnali')
showCandlestickPatterns = input.bool(true, 'Mostra Pattern Candlestick', group='Visualizzazione Segnali')
show_reg1 = input.bool(true, 'Mostra Pivot Points', group='Visualizzazione Segnali')

extendOption = input.string("right", "Estensione linea", options=["none", "left", "right", "both"])
extendStyle = extendOption == "right" ? extend.right : extendOption == "left" ? extend.left : extendOption == "both" ? extend.both : extend.none

// ========== PARAMETRI LOOKBACK ==========

pivotLookback = input.int(48, "Lookback Etichette Pivot", group='Punti Pivot')
priceActionLookback = input.int(48, minval=1, title="Lookback Pattern & Pivot")

// ========== IMPOSTAZIONI E VALORI ==========

min_pearson = input.float(0.35, 'Pearson R Minimo per Segnali', minval=0.1, maxval=1.0, step=0.01, group='Impostazioni Segnale')

// Impostazioni Regressione Lineare 
lengthInput = input.int(100, title = 'LinReg Lunghezza', minval = 10, maxval = 200, group = 'Regressione Lineare')
sourceInput = input.source(close, title = 'Sorgente', group = 'Regressione Lineare')
linreg_sensitivity = input.float(0.7, title = 'Sensibilità Segnale LinReg', minval = 0.3, maxval = 1.0, step = 0.1, group = 'Regressione Lineare')

// Impostazioni Canale
group1 = 'Impostazioni Canale'
useUpperDevInput = input.bool(true, title = 'Deviazione Superiore', inline = 'Upper Deviation', group = group1)
upperMultInput = input.float(1.0, title = '', inline = 'Upper Deviation', group = group1)
useLowerDevInput = input.bool(true, title = '', inline = 'Lower Deviation', group = group1)
lowerMultInput = input.float(1.0, title = '', inline = 'Lower Deviation', group = group1)

// Impostazioni Segnale
group_signals = 'Impostazioni Segnale'
use_bb_filter = input.bool(true, 'Usa Filtro BB', group = group_signals)
use_pivot_filter = input.bool(true, 'Usa Filtro Pivot', group = group_signals)
use_stoch_rsi_filter = input.bool(true, 'Usa Filtro Stochastic RSI', group = group_signals)
use_ma_cross_filter = input.bool(true, 'Usa Filtro Incrocio Medie', group = group_signals)
use_momentum_filter = input.bool(true, 'Usa Filtro Momentum', group = group_signals)
use_price_action_filter = input.bool(true, 'Usa Filtro Price Action', group = group_signals)
use_macd_filter = input.bool(true, 'Usa Filtro MACD', group = group_signals)

// ========== CALCOLI OPERATIVI ==========

// Calcolo STOCHASTIC RSI 
rsi_source = ta.rsi(close, 14)
stoch_rsi = ta.stoch(rsi_source, rsi_source, rsi_source, 14)
stoch_k = ta.sma(stoch_rsi, 1)
stoch_d = ta.sma(stoch_k, 2)

// Calcolo Momentum MEDIE MOBILI
ema21 = ta.ema(close, 21)
sma50 = ta.sma(close, 50)
rsi_momentum = ta.rsi(close, 14)
vol_avg = ta.sma(volume, 20)

plot(ema21, title='EMA 21', color=bar_index % 4 < 2 ? color.new(#ffd139, 0) : color.new(#ffd139, 50), linewidth=3)
plot(sma50, title='SMA 50', color=bar_index % 4 < 2 ? color.new(#2702af, 0) : color.new(#2702af, 50), linewidth=3)



// Calcolo Trend generale
trend_bullish = ema21 > sma50 and close > ema21
trend_bearish = ema21 < sma50 and close < ema21

// Calcolo Momentum 
momentum = ta.mom(close, 10)
momentum_normalized = momentum / close * 100

// Calcolo Rate of Change
roc = ta.roc(close, 12)

// Calcolo Williams %R
williams_r_highest = ta.highest(high, 14)
williams_r_lowest = ta.lowest(low, 14)
williams_r = williams_r_highest != williams_r_lowest ? -100 * (williams_r_highest - close) / (williams_r_highest - williams_r_lowest) : 0

// Calcolo Commodity Channel Index
cci = ta.cci(hl2, 20)

// Calcolo Momentum Score combinato
momentum_bullish = momentum_normalized > 0 and roc > 0 and williams_r > -50 and cci > 0
momentum_bearish = momentum_normalized < 0 and roc < 0 and williams_r < -50 and cci < 0

// Calcolo MACD
[macd_line, signal_line, histogram] = ta.macd(close, 12, 26, 9)
macd_bullish = macd_line > signal_line and histogram > histogram[1]
macd_bearish = macd_line < signal_line and histogram < histogram[1]

// Calcolo PRICE ACTION PATTERNS
atr = ta.atr(14)
body = math.abs(close - open)
body_pct = body / (high - low) * 100
is_doji = body_pct <= 0.1
bullish_engulfing = close > open and close[1] < open[1] and open <= close[1] and close >= open[1] and body > body[1] * 1.2
bearish_engulfing = close < open and close[1] > open[1] and open >= close[1] and close <= open[1] and body > body[1] * 1.2
lower_shadow = open < close ? open - low : close - low
upper_shadow = open < close ? high - close : high - open
total_range = high - low
hammer = lower_shadow > body * 2 and upper_shadow < body * 0.5 and total_range > atr * 0.5
shooting_star = upper_shadow > body * 2 and lower_shadow < body * 0.5 and total_range > atr * 0.5
price_action_bullish = bullish_engulfing or (hammer and close > open)
price_action_bearish = bearish_engulfing or (shooting_star and close < open)

// ========== REGRESSIONE LINEARE E PEARSON R ==========

calcSlope(source, length) =>
    max_bars_back(source, 5000)
    if not barstate.islast or length <= 1
        [float(na), float(na), float(na)]
    else
        sumX = 0.0
        sumY = 0.0
        sumXSqr = 0.0
        sumXY = 0.0
        for i = 0 to length - 1 by 1
            val = source[i]
            per = i + 1.0
            sumX := sumX + per
            sumY := sumY + val
            sumXSqr := sumXSqr + per * per
            sumXY := sumXY + val * per
        slope = (length * sumXY - sumX * sumY) / (length * sumXSqr - sumX * sumX)
        average = sumY / length
        intercept = average - slope * sumX / length + slope
        [slope, average, intercept]

[s, a, i] = calcSlope(sourceInput, lengthInput)
startPrice = i + s * (lengthInput - 1)
endPrice = i

calcDev(source, length, slope, average, intercept) =>
    upDev = 0.0
    dnDev = 0.0
    stdDevAcc = 0.0
    dsxx = 0.0
    dsyy = 0.0
    dsxy = 0.0
    periods = length - 1
    daY = intercept + slope * periods / 2
    val = intercept
    for j = 0 to periods by 1
        price = high[j] - val
        if price > upDev
            upDev := price
        price := val - low[j]
        if price > dnDev
            dnDev := price
        price := source[j]
        dxt = price - average
        dyt = val - daY
        price := price - val
        stdDevAcc := stdDevAcc + price * price
        dsxx := dsxx + dxt * dxt
        dsyy := dsyy + dyt * dyt
        dsxy := dsxy + dxt * dyt
        val := val + slope
    stdDev = math.sqrt(stdDevAcc / (periods == 0 ? 1 : periods))
    pearsonR = dsxx == 0 or dsyy == 0 ? 0 : dsxy / math.sqrt(dsxx * dsyy)
    [stdDev, pearsonR, upDev, dnDev]

[stdDev, pearsonR, upDev, dnDev] = calcDev(sourceInput, lengthInput, s, a, i)

// ========== CALCOLO CONFLUENCE SCORE OTTIMIZZATO ==========

float confluence_score = 0.0

// Calcolo delle Bande di Bollinger
bb_length = input.int(20, minval = 1, title = 'Lunghezza BB', group = 'Bande di Bollinger')
bb_mult = input.float(1.0, minval = 0.001, maxval = 50, title = 'Deviazione Std BB', group = 'Bande di Bollinger')
bb_src = input(close, title = 'Sorgente BB', group = 'Bande di Bollinger')

bb_basis = ta.sma(bb_src, bb_length)
bb_dev = bb_mult * ta.stdev(bb_src, bb_length)
bb_upper = bb_basis + bb_dev
bb_lower = bb_basis - bb_dev

// Calcolo della posizione BB (-1 = vicino alla banda inferiore, +1 = vicino alla superiore)
bb_position = (close - bb_lower) / (bb_upper - bb_lower) * 2 - 1

plot(bb_basis, title='Base BB', color=color.new(#f0e0e0, 100), linewidth=2)
plot(bb_upper, title='Superiore BB', color=color.new(#be3f00, 1), linewidth=3)
plot(bb_lower, title='Inferiore BB', color=color.new(#883cf1, 1), linewidth=3)



// Contributo BB
if use_bb_filter
    confluence_score += bb_position <= -0.7 ? 1 : bb_position >= 0.7 ? -1 : 0

// Calcolo Pivot High e Low
ph = ta.pivothigh(length, length)
pl = ta.pivotlow(length, length)

if not na(ph)
    recent_ph := ph
    recent_ph_bar := bar_index - length
if not na(pl)
    recent_pl := pl
    recent_pl_bar := bar_index - length

// Contributo Confluence Score
if use_pivot_filter and not na(recent_ph) and not na(recent_pl)
    distance_to_ph = math.abs(close - recent_ph) / recent_ph * 100
    distance_to_pl = math.abs(close - recent_pl) / recent_pl * 100
    confluence_score += distance_to_pl < 3 ? 1 : distance_to_ph < 3 ? -1 : 0


// Contributo Stochastic RSI
if use_stoch_rsi_filter
    confluence_score += (stoch_k <= 20 and stoch_d <= 20) ? 1 : (stoch_k >= 80 and stoch_d >= 80) ? -1 : 0

// Contributo Medie Mobili
if use_ma_cross_filter
    confluence_score += trend_bullish and rsi_momentum > 50 ? 0.5 : trend_bearish and rsi_momentum < 50 ? -0.5 : 0

// Contributo Momentum
if use_momentum_filter
    confluence_score += momentum_bullish ? 1 : momentum_bearish ? -1 : 0

// Contributo Price Action
if use_price_action_filter
    confluence_score += price_action_bullish ? 1 : price_action_bearish ? -1 : 0

// Contributo MACD
if use_macd_filter
    confluence_score += macd_bullish ? 1 : macd_bearish ? -1 : 0

// ========== VISUALIZZAZIONE CONFLUENCE SCORE ==========

// Visualizza il confluence score in alto, subito dopo Pearson R
var label confluence_label = na
if not na(confluence_label)
    label.delete(confluence_label)
confluence_label := label.new(bar_index, high + atr * 1.2, "🌬️ Score " + str.tostring(confluence_score, "#.#"),
     color = confluence_score > 0 ? color.new(color.green, 10) : confluence_score < 0 ? color.new(color.red, 10) : color.new(color.gray, 0),
     style = label.style_label_down, size = size.normal, yloc = yloc.abovebar)


// Calculate LinReg position (-1 to +1) - PIÙ SENSIBILE
// Soglia Pearson R per validità segnali LinReg
min_pearson_for_linreg = input.float(0.2, 'Pearson R Minimo per LinReg', minval = 0.1, maxval = 1.0, step = 0.01, group = group_signals)

// Calcolo posizione LinReg normalizzata rispetto al canale visualizzato
linreg_position = not na(stdDev) and stdDev > 0 ? math.max(-1, math.min(1, (close - endPrice) / (stdDev * lowerMultInput))) : 0

// Filtro: posizione LinReg solo se Pearson R è sufficiente
linreg_position_filtered = pearsonR >= min_pearson_for_linreg ? linreg_position : na

// Etichetta per dashboard: mostra valore o NEUTRO se Pearson R troppo basso
linreg_label = pearsonR >= min_pearson_for_linreg ? str.tostring(linreg_position, "#.##") : "NEUTRO"

// === CALCOLO COORDINATE LINEE LINREG ===
upperStartPrice = startPrice + (useUpperDevInput ? upperMultInput * stdDev : upDev)
upperEndPrice   = endPrice   + (useUpperDevInput ? upperMultInput * stdDev : upDev)
var line upper = na

lowerStartPrice = startPrice + (useLowerDevInput ? -lowerMultInput * stdDev : -dnDev)
lowerEndPrice   = endPrice   + (useLowerDevInput ? -lowerMultInput * stdDev : -dnDev)
var line lower = na

// === DISEGNO LINEE LINREG CON COLORI PERSONALIZZABILI ===
colorUpper = color.rgb(166, 63, 3, 82)      // Zona superiore (arancione trasparente)
colorLower = color.rgb(108, 86, 140, 82)    // Zona inferiore (viola trasparente)

var line baseLine = na
if na(baseLine) and not na(startPrice)
    baseLine := line.new(bar_index - lengthInput + 1, startPrice, bar_index, endPrice, width = 1, extend = extendStyle, color = color.new(colorLower, 0))
else
    line.set_xy1(baseLine, bar_index - lengthInput + 1, startPrice)
    line.set_xy2(baseLine, bar_index, endPrice)


if na(upper) and not na(upperStartPrice)
    upper := line.new(bar_index - lengthInput + 1, upperStartPrice, bar_index, upperEndPrice, width = 1, extend = extendStyle, color = color.new(colorUpper, 0))
else
    line.set_xy1(upper, bar_index - lengthInput + 1, upperStartPrice)
    line.set_xy2(upper, bar_index, upperEndPrice)


if na(lower) and not na(lowerStartPrice)
    lower := line.new(bar_index - lengthInput + 1, lowerStartPrice, bar_index, lowerEndPrice, width = 1, extend = extendStyle, color = color.new(colorUpper, 0))
else
    line.set_xy1(lower, bar_index - lengthInput + 1, lowerStartPrice)
    line.set_xy2(lower, bar_index, lowerEndPrice)

linefill.new(upper, baseLine, color = colorUpper)
linefill.new(baseLine, lower, color = colorLower)



// --- LOOKBACK PER LE ETICHETTE ---
// pivotLookback = input.int(72, "Lookback Etichette Pivot", group = 'Punti Pivot')
minPivotBar = bar_index - pivotLookback + 1


// --- FUNZIONE LABEL PIVOT ---
createPivotLabel(cond, x, y, txt, clr, sty, sz, yloc_param) =>
    if cond and (bar_index - x) <= pivotLookback
        lbl = label.new(x, y, txt, color=clr, style=sty, size=sz, yloc=yloc_param)
        array.unshift(pivot_labels, lbl)
        if array.size(pivot_labels) > pivotLookback
            old_lbl = array.pop(pivot_labels)
            label.delete(old_lbl)


// ========== FUNZIONE PER VERIFICARE CONDIZIONI BASE ========== 

checkBaseConditions(is_buy_direction) =>
    // 1. LinReg in zona critica
    linreg_in_zone = is_buy_direction ? linreg_position <= -0.7 : linreg_position >= 0.7

    // 2. Pearson R valido (soglia impostabile, es: 0.4)
    pearson_valid = math.abs(pearsonR) >= min_pearson

    // 3. Bollinger Bands favorevole (OBBLIGATORIO)
    bb_favorable = is_buy_direction ? bb_position <= -0.5 : bb_position >= 0.5

    // 4. Uno (e solo uno necessario) tra gli indicatori di momentum a scelta
    momentum_ok =
         (use_stoch_rsi_filter and (is_buy_direction ? (stoch_k <= 30 and stoch_d <= 30) : (stoch_k >= 70 and stoch_d >= 70))) or
         (use_ma_cross_filter and (is_buy_direction ? (trend_bullish and rsi_momentum > 45) : (trend_bearish and rsi_momentum < 55))) or
         (use_momentum_filter and (is_buy_direction ? momentum_bullish : momentum_bearish)) or
         (use_macd_filter and (is_buy_direction ? macd_bullish : macd_bearish)) or
         (use_price_action_filter and (is_buy_direction ? price_action_bullish : price_action_bearish))

    // Tutte e 4 le condizioni devono essere soddisfatte
    linreg_in_zone and pearson_valid and bb_favorable and momentum_ok


// ========== LOGICA SEGNALE AVANZATA (MODIFICATA) ==========

// LinReg come filtro primario (più sensibile)
linreg_buy_primary = linreg_position <= -linreg_sensitivity
linreg_sell_primary = linreg_position >= linreg_sensitivity

// Calcolo confluence score (seconda variabile obbligatoria) - PARTE ORIGINALE MANTENUTA
confluence_score := 0.0

// Contributo BB
if use_bb_filter
    if bb_position <= -0.7
        confluence_score := confluence_score + 1
    else if bb_position >= 0.7
        confluence_score := confluence_score - 1

// Contributo Pivot
if use_pivot_filter and not na(recent_ph) and not na(recent_pl)
    distance_to_ph = math.abs(close - recent_ph) / recent_ph * 100
    distance_to_pl = math.abs(close - recent_pl) / recent_pl * 100

    if distance_to_pl < 3
        confluence_score := confluence_score + 1
    else if distance_to_ph < 3
        confluence_score := confluence_score - 1

// Contributo Stochastic RSI
stoch_oversold = input.float(20, 'Livello Ipervenduto', minval = 0, maxval = 50, group = 'Impostazioni Stochastic RSI')
stoch_overbought = input.float(80, 'Livello Ipercomprato', minval = 50, maxval = 100, group = 'Impostazioni Stochastic RSI')


if use_stoch_rsi_filter
    if stoch_k <= stoch_oversold and stoch_d <= stoch_oversold
        confluence_score := confluence_score + 1
    else if stoch_k >= stoch_overbought and stoch_d >= stoch_overbought
        confluence_score := confluence_score - 1

// Contributo Medie Mobili
if use_ma_cross_filter
    if trend_bullish and rsi_momentum > 50
        confluence_score := confluence_score + 0.5
    else if trend_bearish and rsi_momentum < 50
        confluence_score := confluence_score - 0.5

// Contributo Momentum
if use_momentum_filter
    if momentum_bullish
        confluence_score := confluence_score + 1
    else if momentum_bearish
        confluence_score := confluence_score - 1

// Contributo Price Action
if use_price_action_filter
    if price_action_bullish
        confluence_score := confluence_score + 1
    else if price_action_bearish
        confluence_score := confluence_score - 1
		
// Contributo MACD (aggiungi dopo il contributo Price Action)
if use_macd_filter
    if macd_bullish
        confluence_score := confluence_score + 1
    else if macd_bearish
        confluence_score := confluence_score - 1

// ========== NUOVA LOGICA SEGNALE E TIMER ==========

// 1. VARIABILI PER MEMORIZZARE CONDIZIONI (nuove)
var bool linreg_buy_stored = false
var bool linreg_sell_stored = false
var float confluence_stored = 0.0

// 2. LOGICA MIGLIORATA - memorizzazione condizioni favorevoli
if linreg_position <= -linreg_sensitivity and confluence_score >= 0.0
    linreg_buy_stored := true
    confluence_stored := confluence_score

if linreg_position >= linreg_sensitivity and confluence_score <= 0.0
    linreg_sell_stored := true
    confluence_stored := confluence_score

// Buffer Pearson R per evitare perdite segnale
var float pearson_buffer = 0.0
if math.abs(pearsonR) >= min_pearson
    pearson_buffer := pearsonR

pearson_extended = math.abs(pearsonR) >= min_pearson or (math.abs(pearson_buffer) >= min_pearson and bar_index - nz(bar_index[1]) <= 3)

// Segnali con logica migliorata
buy_signal_improved = (linreg_position <= -linreg_sensitivity and confluence_score >= 0.0 and pearson_extended) or 
                     (linreg_buy_stored and pearson_extended)
sell_signal_improved = (linreg_position >= linreg_sensitivity and confluence_score <= 0.0 and pearson_extended) or 
                      (linreg_sell_stored and pearson_extended)

// Reset storage quando segnale generato
if buy_signal_improved or sell_signal_improved
    linreg_buy_stored := false
    linreg_sell_stored := false


// ========== SCEGLI QUALE LOGICA USARE  ==========
useImprovedSignals = input.bool(true, "Usa segnali migliorati")
buy_signal  = useImprovedSignals ? buy_signal_improved  : checkBaseConditions(true)
sell_signal = useImprovedSignals ? sell_signal_improved : checkBaseConditions(false)

signal_at_close_buy  = buy_signal  and barstate.isconfirmed
signal_at_close_sell = sell_signal and barstate.isconfirmed

// Calcolo Intensità Segnale
signal_strength = confluence_score + (linreg_buy_primary ? 1 : linreg_sell_primary ? -1 : 0)


// ============= TIMER MIGLIORATO =============

// Timer semplificato
var int last_signal_bar = na
var int last_signal_time = na
    


if barstate.isconfirmed
    if buy_signal
        last_signal_bar := bar_index
        last_signal_buy := true
        last_signal_time := time
    else if sell_signal
        last_signal_bar := bar_index  
        last_signal_buy := false
        last_signal_time := time

ultimo_ok_str = na(last_signal_time) ? "Nessun segnale" : str.format_time(last_signal_time, "dd-MM-yyyy HH:mm", "Europe/Rome")


bars_since = not na(last_signal_bar) ? bar_index - last_signal_bar : na
if not na(bars_since) and bars_since > 0 and bars_since <= 6
    timer_active_new := true
else
    timer_active_new := false

if not na(bars_since) and bars_since > 6
    timer_expired_new := true
else
    timer_expired_new := false


if timer_active_new
    timer_status_new := "OK (" + str.tostring(bars_since) + "/6)" + (last_signal_buy ? " BUY" : " SELL")
else if timer_expired_new
    timer_status_new := "SCADUTO"
else
    timer_status_new := "ASPETTA"

color timer_color_new = na
if timer_active_new
    timer_color_new := last_signal_buy ? color.new(color.lime, 60) : color.new(color.red, 60)
else
    timer_color_new := color.new(color.gray, 80)
string timer_icon_new = timer_active_new ? (last_signal_buy ? "⏰💸" : "⏰⛔") : "💤"



// ========== VISUALIZZAZIONE SEGNALI & PATTERN PRICE ACTION ==========

// ========== FUNZIONI DI GESTIONE LABEL ==========

// Price Action
createPriceActionLabel(cond, x, y, txt, clr, sty, sz, yloc_param) =>
    if cond
        lbl = label.new(x, y, txt, color=clr, style=sty, size=sz, yloc=yloc_param)
        array.unshift(priceaction_labels, lbl)
        if array.size(priceaction_labels) > priceActionLookback
            old_lbl = array.pop(priceaction_labels)
            label.delete(old_lbl)
            

// ========== VISUALIZZAZIONE SEGNALI DI TRADING (SEMPRE VISIBILI) ==========

// Condizioni base (come nel tuo script)
base_conditions_buy = checkBaseConditions(true)
base_conditions_sell = checkBaseConditions(false)


// ========== LIVE SIGNALS (non confermati) ==========
if showSignals and base_conditions_buy and not barstate.isconfirmed
    label.new(bar_index +1, low - atr * 0, 'Compra LIVE\n📈 ' + str.tostring(signal_strength, '#.#'), color=color.new(color.green, 10), style=label.style_label_left, size=size.normal, yloc=yloc.price)

if showSignals and base_conditions_sell and not barstate.isconfirmed
    label.new(bar_index +1, high - atr * 0.3, 'Vendi LIVE\n📉 ' + str.tostring(signal_strength, '#.#'), color=color.new(color.red, 10), style=label.style_label_left, size=size.normal, yloc=yloc.price)

// ========== SEGNALI CONFERMATI ==========
if showSignals and signal_at_close_buy
    label.new(bar_index, low - atr * 0.75, 'OK Compra ✓\n📈 ' + str.tostring(signal_strength, '#.#'), color=color.new(#059c1e, 1), style=label.style_label_up, size=size.normal, yloc=yloc.price)

if showSignals and signal_at_close_sell
    label.new(bar_index, high + atr * 0.65, 'OK Vendi ✓\n📉 ' + str.tostring(signal_strength, '#.#'), color=color.new(#cc0000, 1), style=label.style_label_down, size=size.normal, yloc=yloc.price)

// ========== OPZIONALI (solo se vuoi attivare manualmente emoji extra) ==========
// Commentati per evitare doppioni, attivabili se preferisci
// label.new(bar_index, low, "OK 👆📈", color=color.new(#358069, 80), style=label.style_label_up, size=size.small, yloc=yloc.belowbar)
// label.new(bar_index, high, "OK 👇📉", color=color.new(#b92222, 80), style=label.style_label_down, size=size.small, yloc=yloc.abovebar)

// ========== LIVE SIGNALS Operatività ==========
var string quota_trade = ""
var string azione_ingresso = ""
var string azione_uscita = ""
var string etichetta_breve = ""
var string etichetta_breve_acquisto = ""
var string etichetta_breve_uscita = ""

if confluence_score < 0
    quota_trade := "0%"
    etichetta_breve_acquisto := "⏱️ NO"
    etichetta_breve_uscita := "⭕ ESCI"
else if confluence_score == 0
    quota_trade := "0%"
    etichetta_breve_acquisto := "⏱️ NO"
    etichetta_breve_uscita := "🤔 VALUTA"
else if confluence_score == 0.5
    quota_trade := "10%"
    etichetta_breve_acquisto := "💵"
    etichetta_breve_uscita := "🔒 MANTIENI"
else if confluence_score == 1
    quota_trade := "20%"
    etichetta_breve_acquisto := "💵💵"
    etichetta_breve_uscita := "🔒 MANTIENI"
else if confluence_score == 1.5
    quota_trade := "40%"
    etichetta_breve_acquisto := "💵💵💵"
    etichetta_breve_uscita := "🔒 MANTIENI"
else if confluence_score >= 2
    quota_trade := "60%"
    etichetta_breve_acquisto := "💵💵💵💵"
    etichetta_breve_uscita := "🔒 MANTIENI"


// ========== PATTERN PRICE ACTION SUL GRAFICO (SOLO LOOKBACK) ==========
if showCandlestickPatterns
    if bullish_engulfing
        createPriceActionLabel(true, bar_index, low - atr * 0.5, 'ENG RIALZ', color.new(color.green, 20), label.style_label_up, size.tiny, yloc.price)

    // Stella del Mattino
    morning_star = false
    if bar_index >= 2
        candle1_bearish = close[2] < open[2] and (open[2] - close[2]) > atr[2] * 0.5
        candle2_small = math.abs(close[1] - open[1]) < atr[1] * 0.3 and low[1] < low[2]
        candle3_bullish = close > open and (close - open) > atr * 0.5 and close > (open[2] + close[2]) / 2
        morning_star := candle1_bearish and candle2_small and candle3_bullish
    if morning_star
        createPriceActionLabel(true, bar_index, low - atr * 0.4, 'STELLA DI MATT 🌆', color.new(color.blue, 20), label.style_label_up, size.tiny, yloc.price)

    if is_doji
        createPriceActionLabel(true, bar_index, high + atr * 0.5, 'DOJI', color.new(color.yellow, 20), label.style_label_down, size.tiny, yloc.abovebar)
    if bearish_engulfing
        createPriceActionLabel(true, bar_index, high + atr * 0.5, 'ENG RIBAS', color.new(color.red, 20), label.style_label_down, size.tiny, yloc.abovebar)
    if shooting_star
        createPriceActionLabel(true, bar_index, high + atr * 0.3, 'STELLA CAD', color.new(color.orange, 20), label.style_label_down, size.tiny, yloc.abovebar)

    // Stella della Sera
    evening_star = false
    if bar_index >= 2
        candle1_bullish = close[2] > open[2] and (close[2] - open[2]) > atr[2] * 0.5
        candle2_small = math.abs(close[1] - open[1]) < atr[1] * 0.3 and high[1] > high[2]
        candle3_bearish = close < open and (open - close) > atr * 0.5 and close < (open[2] + close[2]) / 2
        evening_star := candle1_bullish and candle2_small and candle3_bearish
    if evening_star
        createPriceActionLabel(true, bar_index, high + atr * 0.4, 'STELLA DI SERA 🌆', color.new(color.purple, 20), label.style_label_down, size.tiny, yloc.abovebar)


// ========== VISUALIZZAZIONE PIVOT POINTS (SOLO LOOKBACK) ==========
if show_reg1
    if not na(ph) and (bar_index - length) <= pivotLookback
        createPivotLabel(true, bar_index - length, ph, 'MA', reg_ph_css, label.style_label_down, size.tiny, yloc.abovebar)
    if not na(pl) and (bar_index - length) <= pivotLookback
        createPivotLabel(true, bar_index - length, pl, 'MI', reg_pl_css, label.style_label_up, size.tiny, yloc.price)

// ========== VISUALIZZAZIONE VERIFICA SEGNALE BASE IN HEAD () da implementare ) ==========
// Determina lo stato dei tre filtri principali
// linreg_dot = linreg_buy_primary ? '🟢' : linreg_sell_primary ? '🔴☄️' : '⚪'
//  pearson_dot = pearson_ok ? '🟢' : '🔴'
// bb_dot = bb_position <= -0.5 ? '🟢' : bb_position >= 0.5 ? '🔴' : '⚪'

// Componi la stringa dei tre pallini
// header_dots = linreg_dot + " " + pearson_dot + " " + bb_dot

// Calcolo delle distanze dai pivot (da dichiarare PRIMA della dashboard)
pivot_distance_ph = not na(recent_ph) ? math.abs(close - recent_ph) / recent_ph * 100 : na
pivot_distance_pl = not na(recent_pl) ? math.abs(close - recent_pl) / recent_pl * 100 : na

// Logica dei pallini colorati per stato Pivot
pivot_dot = not na(pivot_distance_pl) and pivot_distance_pl < 3 ? '💲' : not na(pivot_distance_ph) and pivot_distance_ph < 3 ? '⭕' : '↔️'
pivot_text = not na(pivot_distance_pl) and pivot_distance_pl < 3 ? 'SUPPORTO' : 
             not na(pivot_distance_ph) and pivot_distance_ph < 3 ? 'RESISTENZA' : 'NEUTRO'
pivot_bg_color = not na(pivot_distance_pl) and pivot_distance_pl < 3 ? color.new(color.lime, 75) :
                 not na(pivot_distance_ph) and pivot_distance_ph < 3 ? color.new(color.red, 75) :
                 color.new(color.yellow, 75)




// ========== DASHBOARD AVANZATA ==========
pearson_ok = math.abs(pearsonR) >= min_pearson
var table info_table = table.new(position.bottom_right, 3, 16, bgcolor = color.new(color.black, 95), border_width = 1, border_color = color.new(color.gray, 60))

if barstate.islast and showSignals

    // Header
    table.cell(info_table, 0, 0, '💫 Strategia Multi-Confluenza', text_color = color.new(color.white, 20) , bgcolor = color.new(color.blue, 80), text_size = size.small)
    table.merge_cells(info_table, 0, 0, 2, 0)

    // 1. LinReg Position
    linreg_icon = linreg_buy_primary ? '💲' : linreg_sell_primary ? '⭕' : '↔️'
    linreg_color = linreg_buy_primary ? color.new(color.lime, 60) : linreg_sell_primary ? color.new(color.red, 60) : color.new(color.yellow, 70)
    linreg_text = linreg_buy_primary ? 'COMPRA' : linreg_sell_primary ? 'VENDI' : 'NEUTRO'
    table.cell(info_table, 0, 1, '🔆 LinReg', text_color = color.white, bgcolor = color.new(#2041bb, 70), text_size = size.small)
    table.cell(info_table, 1, 1, linreg_icon, text_color = color.white, bgcolor = linreg_color, text_size = size.large)
    table.cell(info_table, 2, 1, linreg_text + '\n' + str.tostring(linreg_position, '#.##'), text_color = color.white, bgcolor = linreg_color, text_size = size.small)

        // 4. Bollinger
    bb_icon = bb_position <= -0.7 ? '💲' : bb_position >= 0.7 ? '⭕' : '↔️'
    bb_color = bb_position <= -0.7 ? color.new(color.lime, 60) : bb_position >= 0.7 ? color.new(color.red, 60) : color.new(color.yellow, 60)
    bb_text = bb_position <= -0.7 ? 'COMPRA' : bb_position >= 0.7 ? 'VENDI' : 'NEUTRO'
    table.cell(info_table, 0, 2, '〽️ Bollinger', text_color = color.white, bgcolor = color.new(#2041bb, 70), text_size = size.small)
    table.cell(info_table, 1, 2, bb_icon, text_color = color.white, bgcolor = bb_color, text_size = size.large)
    table.cell(info_table, 2, 2, bb_text + '\n' + str.tostring(bb_position, '#.##'), text_color = color.white, bgcolor = bb_color, text_size = size.small)

     // 3. Confluence Score
    conf_icon = confluence_score >= 1 ? '💲' : confluence_score <= -1 ? '⭕' : '↔️'
    conf_color = confluence_score >= 1 ? color.new(color.lime, 75) : confluence_score <= -1 ? color.new(color.red, 75) : color.new(color.yellow, 80)
    conf_text = confluence_score >= 1 ? 'COMPRA' : confluence_score <= -1 ? 'VENDI' : 'NEUTRO'
    table.cell(info_table, 0, 3, '🔑 Confluenza', text_color = color.white, bgcolor = color.new(#774ae2, 70), text_size = size.small)
    table.cell(info_table, 1, 3, conf_icon, text_color = color.white, bgcolor = conf_color, text_size = size.large)
    table.cell(info_table, 2, 3, conf_text + '\n' + str.tostring(confluence_score, '#.#'), text_color = color.white, bgcolor = conf_color, text_size = size.small)
    
    // 5. Stochastic RSI
    stoch_icon = stoch_k <= stoch_oversold ? '💲' : stoch_k >= stoch_overbought ? '⭕' : '↔️'
    stoch_color = stoch_k <= stoch_oversold ? color.new(color.lime, 75) : stoch_k >= stoch_overbought ? color.new(color.red, 75) : color.new(color.yellow, 80)
    stoch_text = stoch_k <= stoch_oversold ? 'COMPRA' : stoch_k >= stoch_overbought ? 'VENDI' : 'NEUTRO'
    table.cell(info_table, 0, 4, '⚡ Stoch RSI', text_color = color.white, bgcolor = color.new(#904beb, 85), text_size = size.small)
    table.cell(info_table, 1, 4, stoch_icon, text_color = color.white, bgcolor = stoch_color, text_size = size.large)
    table.cell(info_table, 2, 4, stoch_text + '\nK:' + str.tostring(stoch_k, '#') + ' D:' + str.tostring(stoch_d, '#'), text_color = color.white, bgcolor = stoch_color, text_size = size.small)

    // 6. Price Action
    pa_icon = price_action_bullish ? '💲' : price_action_bearish ? '⭕' : '↔️'
    pa_color = price_action_bullish ? color.new(color.lime, 75) : price_action_bearish ? color.new(color.red, 75) : color.new(color.yellow, 80)
    pa_text = price_action_bullish ? 'RIALZISTA' : price_action_bearish ? 'RIBASSISTA' : 'NEUTRO'
    table.cell(info_table, 0, 5, '🕯️ Price Action', text_color = color.white, bgcolor = color.new(color.gray, 85), text_size = size.small)
    table.cell(info_table, 1, 5, pa_icon, text_color = color.white, bgcolor = pa_color, text_size = size.large)
    table.cell(info_table, 2, 5, pa_text + '\nATR:' + str.tostring(atr, '#.####'), text_color = color.white, bgcolor = pa_color, text_size = size.small)

    // 7. Pivot Points
    // Riga Pivot nella tabella
    table.cell(info_table, 0, 6, '📍 Pivot', text_color = color.white, bgcolor = color.new(color.gray, 85), text_size = size.small)
    table.cell(info_table, 1, 6, pivot_dot, text_color = color.white, bgcolor = pivot_bg_color, text_size = size.large)
    table.cell(info_table, 2, 6, pivot_text + '\nA:' + str.tostring(pivot_distance_ph, '#.#') + ' B:' + str.tostring(pivot_distance_pl, '#.#'), text_color = color.white, bgcolor = pivot_bg_color, text_size = size.small)

    // 8. Momentum
    momentum_icon = momentum_bullish ? '🚀' : momentum_bearish ? '⭕' : '↔️'
    momentum_color = momentum_bullish ? color.new(color.lime, 75) : momentum_bearish ? color.new(color.red, 75) : color.new(color.yellow, 80)
    momentum_text = momentum_bullish ? 'RIALZISTA' : momentum_bearish ? 'RIBASSISTA' : 'NEUTRO'
    table.cell(info_table, 0, 7, '🚀 Momentum', text_color = color.white, bgcolor = color.new(color.gray, 85), text_size = size.small)
    table.cell(info_table, 1, 7, momentum_icon, text_color = color.white, bgcolor = momentum_color, text_size = size.large)
    table.cell(info_table, 2, 7, momentum_text + '\nROC:' + str.tostring(roc, '#.#'), text_color = color.white, bgcolor = momentum_color, text_size = size.small)

    // 9. Medie Mobili
    ma_icon = trend_bullish ? '📈' : trend_bearish ? '📉' : '↔️'
    ma_color = trend_bullish ? color.new(color.lime, 75) : trend_bearish ? color.new(color.red, 75) : color.new(color.yellow, 80)
    ma_text = trend_bullish ? 'RIALZISTA' : trend_bearish ? 'RIBASSISTA' : 'NEUTRO'
    table.cell(info_table, 0, 8, '🐉 Trend MA', text_color = color.white, bgcolor = color.new(color.gray, 85), text_size = size.small)
    table.cell(info_table, 1, 8, ma_icon, text_color = color.white, bgcolor = ma_color, text_size = size.large)
    table.cell(info_table, 2, 8, ma_text + '\nRSI:' + str.tostring(rsi_momentum, '#'), text_color = color.white, bgcolor = ma_color, text_size = size.small)

// 10. MACD
    macd_icon = macd_bullish ? '📈' : macd_bearish ? '📉' : '↔️'
    macd_color = macd_bullish ? color.new(color.lime, 75) : macd_bearish ? color.new(color.red, 75) : color.new(color.yellow, 80)
    macd_text = macd_bullish ? 'RIALZISTA' : macd_bearish ? 'RIBASSISTA' : 'NEUTRO'
    table.cell(info_table, 0, 9, '🛰️ MACD', text_color = color.white, bgcolor = color.new(color.gray, 85), text_size = size.small)
    table.cell(info_table, 1, 9, macd_icon, text_color = color.white, bgcolor = macd_color, text_size = size.large)
    table.cell(info_table, 2, 9, macd_text + '\nH:' + str.tostring(histogram, '#.####'), text_color = color.white, bgcolor = macd_color, text_size = size.small)

    // 11. Signal Strength
    signal_icon = signal_strength >= 2 ? '🔥' : signal_strength <= -2 ? '❄️' : signal_strength > 0 ? '📈' : signal_strength < 0 ? '📉' : '↔️'
    signal_color = signal_strength >= 2 ? color.new(color.green, 50) : signal_strength <= -2 ? color.new(color.red, 50) : 
                   signal_strength > 0 ? color.new(color.lime, 75) : signal_strength < 0 ? color.new(color.orange, 75) : color.new(color.gray, 80)
    signal_text = signal_strength >= 2 ? 'COMPRA FORTE' : signal_strength <= -2 ? 'VENDI FORTE' : 
                  signal_strength > 0 ? 'COMPRA DEBOLE' : signal_strength < 0 ? 'VENDI DEBOLE' : 'NEUTRALE'
    table.cell(info_table, 0, 10, '💪 Forza OK', text_color = color.white, bgcolor = color.new(color.gray, 85), text_size = size.small)
    table.cell(info_table, 1, 10, signal_icon, text_color = color.white, bgcolor = signal_color, text_size = size.large)
    table.cell(info_table, 2, 10, signal_text + '\n' + str.tostring(signal_strength, '#.#'), text_color = color.white, bgcolor = signal_color, text_size = size.small)

    // 12. Market State
    market_state = trend_bullish and confluence_score > 0 ? 'RIALZISTA' : 
         trend_bearish and confluence_score < 0 ? 'RIBASSISTA' : 
         'LATERALE'
    market_icon = trend_bullish and confluence_score > 0 ? '🐂' : 
         trend_bearish and confluence_score < 0 ? '🐻' : '🦀'
    market_color = trend_bullish and confluence_score > 0 ? color.new(color.lime, 80) : 
         trend_bearish and confluence_score < 0 ? color.new(color.red, 80) : 
         color.new(color.yellow, 80)
    table.cell(info_table, 0, 11, '🌍 Trend', text_color = color.white, bgcolor = color.new(#2041bb, 70), text_size = size.small)
    table.cell(info_table, 1, 11, market_icon, text_color = color.white, bgcolor = market_color, text_size = size.large)
    table.cell(info_table, 2, 11, market_state, text_color = color.white, bgcolor = market_color, text_size = size.small)

// 2. Pearson R
    pearson_icon = pearson_ok ? '✅' : '📛'
    pearson_color = pearson_ok ? color.new(color.lime, 60) : color.new(color.red, 60)
    pearson_text = pearson_ok ? 'VALIDO' : 'DEBOLE'
    table.cell(info_table, 0, 12, '🪔 Pearson R', text_color = color.white, bgcolor = color.new(#2041bb, 70), text_size = size.small)
    table.cell(info_table, 1, 12, pearson_icon, text_color = color.white, bgcolor = pearson_color, text_size = size.large)
    table.cell(info_table, 2, 12, pearson_text + '\n' + str.tostring(pearsonR, '#.###'), text_color = color.white, bgcolor = pearson_color, text_size = size.small)

    //  13. Stato Ok - riga del segnale dinamico
if timer_status_new != "ASPETTA"
    table.cell(info_table, 0, 13, '⏰ Status OK', text_color = color.white, bgcolor = color.new(color.gray, 85), text_size = size.small)
    table.cell(info_table, 1, 13, timer_active_new ? (last_signal_buy ? "⏰🟢" : "⏰🔴") : "💤", text_color = color.white, bgcolor = timer_active_new ? (last_signal_buy ? color.new(color.lime, 40) : color.new(color.red, 40)) : color.new(color.gray, 80), text_size = size.large)
    table.cell(info_table, 2, 13, timer_status_new, text_color = color.white, bgcolor = timer_active_new ? (last_signal_buy ? color.new(color.lime, 40) : color.new(color.red, 40)) : color.new(color.gray, 80), text_size = size.small)


    // 14. Ultimo OK Ultimo Ok dinamico
if ultimo_ok_str != "Nessun segnale"
    table.cell(info_table, 0, 14, '🕒 Ultimo OK', text_color = color.white, bgcolor = color.new(color.gray, 85), text_size = size.small)
    table.cell(info_table, 1, 14, last_signal_buy ? '🟢' : '↻', text_color = color.white, bgcolor = timer_color_new, text_size = size.large)
    table.cell(info_table, 2, 14, ultimo_ok_str, text_color = color.white, bgcolor = timer_color_new, text_size = size.small)

    // 15. Colonna acquisto breve
if showSignals and (base_conditions_buy or base_conditions_sell) and not barstate.isconfirmed
    // --- Riga tabella operativa a 3 colonne ---
    table.cell(info_table, 0, 15, etichetta_breve_acquisto, text_color=color.white, bgcolor=color.new(color.lime, 80), text_size=size.small)
    table.cell(info_table, 1, 15, quota_trade, text_color=color.white, bgcolor=color.new(color.lime, 80), text_size=size.large)
    table.cell(info_table, 2, 15, etichetta_breve_uscita, text_color=color.white, bgcolor=color.new(color.red, 80), text_size=size.small)






// ============= ALERT CONDITIONS MIGLIORATI =============

alertcondition(timer_active_new and bars_since >= 6 and last_signal_buy and base_conditions_buy, title = 'BUY Confermato 6+', message = '✅ COMPRA {{ticker}} - Timer: 6/6')

alertcondition(timer_active_new and bars_since >= 6 and not last_signal_buy and base_conditions_sell, title = 'SELL Confermato 6+', message = '❌ VENDI {{ticker}} - Timer: 6/6')

// ========== NOTE ==========
// - Le etichette dei segnali confermati (es. con 1.5 ecc.) sono lasciate intatte.
// - La persistenza dei segnali (OK BUY/SELL) è mantenuta.
// - Se le label o i plotshape generano errori di visualizzazione per eccesso di elementi, commentare le relative righe.
// - Tutte le altre funzionalità e filtri restano invariati rispetto al tuo script originale.