<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sistema Offline - Solo Dati Locali</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        }

        h1 {
            color: #333;
            text-align: center;
            margin-bottom: 30px;
            font-size: 2.5em;
        }

        .status {
            background: #e8f5e8;
            border: 2px solid #4caf50;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 30px;
            text-align: center;
            font-weight: bold;
            color: #2e7d32;
        }

        .section {
            margin-bottom: 30px;
            padding: 20px;
            border: 1px solid #e0e0e0;
            border-radius: 10px;
            background: #f9f9f9;
        }

        .section h3 {
            color: #444;
            margin-bottom: 15px;
            font-size: 1.3em;
        }

        .btn {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            margin: 5px;
            transition: transform 0.2s;
        }

        .btn:hover {
            transform: translateY(-2px);
        }

        .btn.danger {
            background: linear-gradient(45deg, #ff6b6b, #ee5a24);
        }

        .btn.success {
            background: linear-gradient(45deg, #00d2d3, #54a0ff);
        }

        .data-display {
            background: #2c3e50;
            color: #ecf0f1;
            padding: 15px;
            border-radius: 8px;
            font-family: 'Courier New', monospace;
            white-space: pre-wrap;
            max-height: 300px;
            overflow-y: auto;
            margin-top: 10px;
        }

        .input-group {
            margin-bottom: 15px;
        }

        .input-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #555;
        }

        .input-group input, .input-group textarea {
            width: 100%;
            padding: 10px;
            border: 2px solid #ddd;
            border-radius: 5px;
            font-size: 14px;
        }

        .input-group textarea {
            height: 100px;
            resize: vertical;
        }

        .cors-info {
            background: #fff3cd;
            border: 2px solid #ffc107;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 20px;
        }

        .cors-info h4 {
            color: #856404;
            margin-bottom: 10px;
        }

        .cors-info p {
            color: #856404;
            margin-bottom: 5px;
        }

        .offline-badge {
            display: inline-block;
            background: #28a745;
            color: white;
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 12px;
            font-weight: bold;
            margin-left: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üîí Sistema Offline<span class="offline-badge">NO CORS</span></h1>
        
        <div class="status">
            ‚úÖ Modalit√† Offline Attiva - Nessuna richiesta esterna - Solo dati locali
        </div>

        <div class="cors-info">
            <h4>üö´ CORS Disabilitato</h4>
            <p>‚Ä¢ Nessuna richiesta HTTP esterna</p>
            <p>‚Ä¢ Solo localStorage e memoria RAM</p>
            <p>‚Ä¢ Dati gi√† caricati nel browser</p>
            <p>‚Ä¢ Funzionamento garantito su tutti i browser</p>
        </div>

        <!-- Sezione Gestione Dati -->
        <div class="section">
            <h3>üíæ Gestione Dati Locali</h3>
            
            <div class="input-group">
                <label>Chiave:</label>
                <input type="text" id="dataKey" placeholder="Nome del dato (es: utenti, prodotti)">
            </div>

            <div class="input-group">
                <label>Dati (JSON):</label>
                <textarea id="dataValue" placeholder='{"nome": "Mario", "et√†": 30}'></textarea>
            </div>

            <button class="btn" onclick="saveLocalData()">üíæ Salva nei Dati Locali</button>
            <button class="btn success" onclick="loadLocalData()">üìÑ Carica Dati</button>
            <button class="btn danger" onclick="deleteLocalData()">üóëÔ∏è Elimina</button>
        </div>

        <!-- Sezione Visualizzazione -->
        <div class="section">
            <h3>üëÅÔ∏è Visualizza Dati Salvati</h3>
            <button class="btn" onclick="showAllData()">üìã Mostra Tutti i Dati</button>
            <button class="btn success" onclick="exportData()">üì• Esporta Tutto</button>
            <button class="btn" onclick="importData()">üì§ Importa Dati</button>
            <div id="dataDisplay" class="data-display" style="display: none;"></div>
        </div>

        <!-- Sezione Dati Precaricati -->
        <div class="section">
            <h3>üéØ Dati di Esempio Precaricati</h3>
            <button class="btn" onclick="loadSampleData()">üöÄ Carica Dati di Test</button>
            <button class="btn danger" onclick="clearAllData()">üßπ Pulisci Tutto</button>
        </div>

        <!-- Informazioni Storage -->
        <div class="section">
            <h3>üìä Informazioni Storage</h3>
            <button class="btn" onclick="showStorageInfo()">üìà Mostra Info Storage</button>
            <div id="storageInfo" class="data-display" style="display: none;"></div>
        </div>
    </div>

    <script>
        // ================= SISTEMA OFFLINE PURO =================
        console.log('üîí Sistema Offline Inizializzato - NO CORS!');

        // Memoria temporanea per sessione corrente
        let sessionData = {};

        // ================= FUNZIONI BASE =================
        function saveLocalData() {
            const key = document.getElementById('dataKey').value.trim();
            const value = document.getElementById('dataValue').value.trim();

            if (!key) {
                alert('‚ö†Ô∏è Inserisci una chiave!');
                return;
            }

            if (!value) {
                alert('‚ö†Ô∏è Inserisci dei dati!');
                return;
            }

            try {
                // Prova a parsare come JSON
                const parsedData = JSON.parse(value);
                
                // Salva in localStorage
                localStorage.setItem(key, JSON.stringify(parsedData));
                
                // Salva anche in memoria di sessione
                sessionData[key] = parsedData;

                console.log('‚úÖ Dato salvato:', key, parsedData);
                alert(`‚úÖ Dati salvati con chiave: ${key}`);
                
                // Pulisci i campi
                document.getElementById('dataKey').value = '';
                document.getElementById('dataValue').value = '';

            } catch (error) {
                // Se non √® JSON, salva come stringa
                localStorage.setItem(key, value);
                sessionData[key] = value;
                
                console.log('‚úÖ Stringa salvata:', key, value);
                alert(`‚úÖ Stringa salvata con chiave: ${key}`);
            }
        }

        function loadLocalData() {
            const key = document.getElementById('dataKey').value.trim();
            
            if (!key) {
                alert('‚ö†Ô∏è Inserisci una chiave da caricare!');
                return;
            }

            // Prova prima dalla memoria di sessione
            if (sessionData[key]) {
                document.getElementById('dataValue').value = JSON.stringify(sessionData[key], null, 2);
                console.log('üìÑ Caricato dalla memoria:', key);
                return;
            }

            // Altrimenti da localStorage
            const data = localStorage.getItem(key);
            if (data) {
                try {
                    const parsed = JSON.parse(data);
                    document.getElementById('dataValue').value = JSON.stringify(parsed, null, 2);
                } catch (e) {
                    document.getElementById('dataValue').value = data;
                }
                console.log('üìÑ Caricato da localStorage:', key);
            } else {
                alert(`‚ùå Nessun dato trovato per la chiave: ${key}`);
            }
        }

        function deleteLocalData() {
            const key = document.getElementById('dataKey').value.trim();
            
            if (!key) {
                alert('‚ö†Ô∏è Inserisci una chiave da eliminare!');
                return;
            }

            if (confirm(`üóëÔ∏è Sei sicuro di voler eliminare "${key}"?`)) {
                localStorage.removeItem(key);
                delete sessionData[key];
                
                console.log('üóëÔ∏è Dato eliminato:', key);
                alert(`‚úÖ Dato eliminato: ${key}`);
                
                document.getElementById('dataValue').value = '';
            }
        }

        // ================= VISUALIZZAZIONE DATI =================
        function showAllData() {
            const display = document.getElementById('dataDisplay');
            let output = 'üìã TUTTI I DATI SALVATI:\n\n';

            // Dati da localStorage
            output += 'üè† LOCAL STORAGE:\n';
            if (localStorage.length === 0) {
                output += '  (vuoto)\n';
            } else {
                for (let i = 0; i < localStorage.length; i++) {
                    const key = localStorage.key(i);
                    const value = localStorage.getItem(key);
                    output += `  üìù ${key}:\n`;
                    try {
                        const parsed = JSON.parse(value);
                        output += `    ${JSON.stringify(parsed, null, 4)}\n\n`;
                    } catch (e) {
                        output += `    "${value}"\n\n`;
                    }
                }
            }

            // Dati da memoria di sessione
            output += '\nüß† MEMORIA SESSIONE:\n';
            if (Object.keys(sessionData).length === 0) {
                output += '  (vuoto)\n';
            } else {
                for (const [key, value] of Object.entries(sessionData)) {
                    output += `  üìù ${key}:\n`;
                    output += `    ${JSON.stringify(value, null, 4)}\n\n`;
                }
            }

            display.textContent = output;
            display.style.display = 'block';
        }

        // ================= EXPORT/IMPORT =================
        function exportData() {
            const exportObj = {
                timestamp: new Date().toISOString(),
                localStorage: {},
                sessionData: sessionData
            };

            // Esporta localStorage
            for (let i = 0; i < localStorage.length; i++) {
                const key = localStorage.key(i);
                const value = localStorage.getItem(key);
                try {
                    exportObj.localStorage[key] = JSON.parse(value);
                } catch (e) {
                    exportObj.localStorage[key] = value;
                }
            }

            // Crea il download
            const dataStr = JSON.stringify(exportObj, null, 2);
            const dataBlob = new Blob([dataStr], { type: 'application/json' });
            const url = URL.createObjectURL(dataBlob);
            
            const link = document.createElement('a');
            link.href = url;
            link.download = `backup_offline_${new Date().toISOString().split('T')[0]}.json`;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            URL.revokeObjectURL(url);
            alert('üì• Export completato!');
        }

        function importData() {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = '.json';
            
            input.onchange = function(event) {
                const file = event.target.files[0];
                if (!file) return;
                
                const reader = new FileReader();
                reader.onload = function(e) {
                    try {
                        const importObj = JSON.parse(e.target.result);
                        
                        let imported = 0;
                        
                        // Importa localStorage
                        if (importObj.localStorage) {
                            for (const [key, value] of Object.entries(importObj.localStorage)) {
                                localStorage.setItem(key, JSON.stringify(value));
                                imported++;
                            }
                        }
                        
                        // Importa sessionData
                        if (importObj.sessionData) {
                            Object.assign(sessionData, importObj.sessionData);
                            imported += Object.keys(importObj.sessionData).length;
                        }
                        
                        alert(`‚úÖ Import completato!\n${imported} elementi importati.`);
                        
                    } catch (error) {
                        alert('‚ùå Errore durante l\'import:\n' + error.message);
                    }
                };
                
                reader.readAsText(file);
            };
            
            input.click();
        }

        // ================= DATI DI ESEMPIO =================
        function loadSampleData() {
            const sampleData = {
                'utenti': [
                    { id: 1, nome: 'Mario Rossi', email: 'mario@email.com', et√†: 30 },
                    { id: 2, nome: 'Luigi Verdi', email: 'luigi@email.com', et√†: 25 },
                    { id: 3, nome: 'Anna Bianchi', email: 'anna@email.com', et√†: 28 }
                ],
                'prodotti': [
                    { id: 1, nome: 'Laptop', prezzo: 899, categoria: 'Elettronica' },
                    { id: 2, nome: 'Mouse', prezzo: 25, categoria: 'Accessori' },
                    { id: 3, nome: 'Tastiera', prezzo: 45, categoria: 'Accessori' }
                ],
                'configurazione': {
                    tema: 'scuro',
                    lingua: 'italiano',
                    notifiche: true,
                    versione: '1.0.0'
                },
                'statistiche': {
                    visite: 1247,
                    utenti_attivi: 23,
                    ultimo_accesso: new Date().toISOString()
                }
            };

            // Salva tutti i dati di esempio
            for (const [key, value] of Object.entries(sampleData)) {
                localStorage.setItem(key, JSON.stringify(value));
                sessionData[key] = value;
            }

            console.log('üöÄ Dati di esempio caricati:', sampleData);
            alert('üöÄ Dati di esempio caricati con successo!\nChiavi: utenti, prodotti, configurazione, statistiche');
        }

        function clearAllData() {
            if (confirm('üßπ Sei sicuro di voler eliminare TUTTI i dati?')) {
                localStorage.clear();
                sessionData = {};
                
                document.getElementById('dataDisplay').style.display = 'none';
                document.getElementById('storageInfo').style.display = 'none';
                
                alert('‚úÖ Tutti i dati sono stati eliminati!');
            }
        }

        // ================= INFORMAZIONI STORAGE =================
        function showStorageInfo() {
            const display = document.getElementById('storageInfo');
            
            let localStorageSize = 0;
            const localStorageCount = localStorage.length;
            
            for (let i = 0; i < localStorage.length; i++) {
                const key = localStorage.key(i);
                const value = localStorage.getItem(key);
                localStorageSize += key.length + value.length;
            }
            
            const sessionSize = JSON.stringify(sessionData).length;
            const sessionCount = Object.keys(sessionData).length;
            
            const info = `üìä INFORMAZIONI STORAGE:

üè† LOCAL STORAGE:
  ‚Ä¢ Elementi: ${localStorageCount}
  ‚Ä¢ Dimensione: ${localStorageSize} bytes (${(localStorageSize/1024).toFixed(2)} KB)
  ‚Ä¢ Limite stimato: ~5-10 MB per dominio

üß† MEMORIA SESSIONE:
  ‚Ä¢ Elementi: ${sessionCount}
  ‚Ä¢ Dimensione: ${sessionSize} bytes (${(sessionSize/1024).toFixed(2)} KB)
  ‚Ä¢ Durata: Fino alla chiusura del browser

üîí MODALIT√Ä OFFLINE:
  ‚Ä¢ ‚úÖ Nessuna richiesta HTTP
  ‚Ä¢ ‚úÖ No problemi CORS
  ‚Ä¢ ‚úÖ Funziona su tutti i browser
  ‚Ä¢ ‚úÖ Dati persistenti localmente

üí° SUGGERIMENTI:
  ‚Ä¢ Usa localStorage per dati permanenti
  ‚Ä¢ Usa memoria sessione per dati temporanei
  ‚Ä¢ Fai backup regolari con l'export
  ‚Ä¢ Monitora lo spazio disponibile`;

            display.textContent = info;
            display.style.display = 'block';
        }

        // ================= INIZIALIZZAZIONE =================
        document.addEventListener('DOMContentLoaded', function() {
            console.log('üîí Sistema Offline Pronto!');
            console.log('‚úÖ Nessun CORS - Solo dati locali');
            
            // Mostra informazioni iniziali
            showStorageInfo();
        });
    </script>
</body>
</html>