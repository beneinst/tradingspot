<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard Trading - Segnali OK</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            color: white;
            min-height: 100vh;
            padding: 20px;
        }

        .dashboard {
            max-width: 1400px;
            margin: 0 auto;
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }

        .panel {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            padding: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        }

        .main-panel {
            grid-column: 1 / -1;
            text-align: center;
        }

        .crypto-selector {
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 15px;
            flex-wrap: wrap;
        }

        .crypto-selector select {
            background: rgba(255, 255, 255, 0.15);
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 8px;
            color: white;
            padding: 10px 15px;
            font-size: 16px;
            min-width: 200px;
            cursor: pointer;
        }

        .crypto-selector select option {
            background: #2a5298;
            color: white;
        }

        .connection-status {
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 14px;
        }

        .status-dot {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            animation: pulse 2s infinite;
        }

        .status-connected {
            background: #4CAF50;
        }

        .status-disconnected {
            background: #f44336;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        .signal-status {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px;
            border-radius: 12px;
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 20px;
            border: 2px solid transparent;
        }

        .signal-buy {
            background: linear-gradient(135deg, #4CAF50, #45a049);
            border-color: #4CAF50;
            box-shadow: 0 0 20px rgba(76, 175, 80, 0.4);
        }

        .signal-sell {
            background: linear-gradient(135deg, #f44336, #d32f2f);
            border-color: #f44336;
            box-shadow: 0 0 20px rgba(244, 67, 54, 0.4);
        }

        .signal-neutral {
            background: linear-gradient(135deg, #9E9E9E, #757575);
            border-color: #9E9E9E;
        }

        .confluence-score {
            font-size: 36px;
            font-weight: bold;
            margin: 10px 0;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        }

        .score-positive { color: #4CAF50; }
        .score-negative { color: #f44336; }
        .score-neutral { color: #FFC107; }

        .indicators-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }

        .indicator-card {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 15px;
            text-align: center;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .indicator-value {
            font-size: 20px;
            font-weight: bold;
            margin: 5px 0;
        }

        .indicator-label {
            font-size: 12px;
            opacity: 0.8;
        }

        .conditions-section {
            margin: 20px 0;
        }

        .condition-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            margin: 5px 0;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 8px;
        }

        .status-indicator {
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 12px;
            font-weight: bold;
        }

        .status-active {
            background: #4CAF50;
            color: white;
        }

        .status-inactive {
            background: #f44336;
            color: white;
        }

        .timer-section {
            margin: 20px 0;
            text-align: center;
        }

        .timer-bar {
            width: 100%;
            height: 20px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 10px;
            overflow: hidden;
            margin: 10px 0;
        }

        .timer-fill {
            height: 100%;
            background: linear-gradient(90deg, #4CAF50, #45a049);
            transition: width 0.3s ease;
        }

        .secondary-indicators {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
            margin: 15px 0;
        }

        .secondary-item {
            display: flex;
            justify-content: space-between;
            padding: 8px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 5px;
            font-size: 14px;
        }

        .pattern-list {
            margin: 15px 0;
        }

        .pattern-item {
            display: flex;
            justify-content: space-between;
            padding: 8px;
            margin: 5px 0;
            border-radius: 5px;
        }

        .pattern-bullish {
            background: rgba(76, 175, 80, 0.3);
            border-left: 4px solid #4CAF50;
        }

        .pattern-bearish {
            background: rgba(244, 67, 54, 0.3);
            border-left: 4px solid #f44336;
        }

        .pattern-neutral {
            background: rgba(158, 158, 158, 0.3);
            border-left: 4px solid #9E9E9E;
        }

        .controls {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin: 20px 0;
            flex-wrap: wrap;
        }

        button {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.2);
            color: white;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s ease;
        }

        button:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
        }

        .stats-section {
            margin: 15px 0;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
        }

        .stat-item {
            background: rgba(255, 255, 255, 0.1);
            padding: 10px;
            border-radius: 5px;
            text-align: center;
        }

        .timestamp {
            text-align: center;
            opacity: 0.7;
            font-size: 12px;
            margin-top: 15px;
        }

        .title {
            font-size: 18px;
            margin-bottom: 15px;
            text-align: center;
            font-weight: bold;
            color: #FFC107;
        }

        .price-info {
            display: flex;
            justify-content: space-around;
            margin: 15px 0;
            font-size: 14px;
        }

        .price-item {
            text-align: center;
        }

        .price-value {
            font-size: 18px;
            font-weight: bold;
            margin-top: 5px;
        }

        .loading {
            opacity: 0.6;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <div class="dashboard">
        <!-- Pannello Principale -->
        <div class="panel main-panel">
            <h1>🎯 DASHBOARD SEGNALI OK</h1>
            
            <!-- Selettore Criptovaluta -->
            <div class="crypto-selector">
                <label for="cryptoSelect" style="font-weight: bold;">Seleziona Criptovaluta:</label>
                <select id="cryptoSelect" onchange="changeCrypto()">
                    <option value="BTCUSDT">Bitcoin (BTC/USDT)</option>
                    <option value="ETHUSDT">Ethereum (ETH/USDT)</option>
                    <option value="BNBUSDT">Binance Coin (BNB/USDT)</option>
                    <option value="ADAUSDT">Cardano (ADA/USDT)</option>
                    <option value="XRPUSDT">Ripple (XRP/USDT)</option>
                    <option value="SOLUSDT">Solana (SOL/USDT)</option>
                    <option value="DOTUSDT">Polkadot (DOT/USDT)</option>
                    <option value="DOGEUSDT">Dogecoin (DOGE/USDT)</option>
                    <option value="AVAXUSDT">Avalanche (AVAX/USDT)</option>
                    <option value="MATICUSDT">Polygon (MATIC/USDT)</option>
                    <option value="LTCUSDT">Litecoin (LTC/USDT)</option>
                    <option value="ATOMUSDT">Cosmos (ATOM/USDT)</option>
                </select>
                
                <div class="connection-status">
                    <div id="connectionDot" class="status-dot status-disconnected"></div>
                    <span id="connectionStatus">Disconnesso</span>
                </div>
            </div>

            <!-- Info Prezzo -->
            <div class="price-info">
                <div class="price-item">
                    <div>Prezzo Attuale</div>
                    <div id="currentPrice" class="price-value">$0.00</div>
                </div>
                <div class="price-item">
                    <div>Variazione 24h</div>
                    <div id="priceChange24h" class="price-value">0.00%</div>
                </div>
                <div class="price-item">
                    <div>Volume 24h</div>
                    <div id="volume24h" class="price-value">$0</div>
                </div>
            </div>
            
            <div id="mainSignal" class="signal-status signal-neutral">
                <span>⚪ IN ATTESA</span>
                <span>0.0</span>
            </div>
            
            <div>
                <div style="font-size: 14px; opacity: 0.8;">CONFLUENCE SCORE</div>
                <div id="confluenceScore" class="confluence-score score-neutral">0.0</div>
            </div>

            <div class="controls">
                <button onclick="refreshData()">🔄 Aggiorna Dati</button>
                <button id="autoRefreshBtn" onclick="toggleAutoRefresh()">⏰ Auto Refresh: OFF</button>
                <button onclick="resetSimulation()">🎲 Reset Simulazione</button>
                <button onclick="connectToBinance()">🔗 Connetti Binance</button>
            </div>
        </div>

        <!-- Indicatori Principali -->
        <div class="panel">
            <div class="title">📊 INDICATORI PRINCIPALI</div>
            <div class="indicators-grid">
                <div class="indicator-card">
                    <div class="indicator-label">LinReg Position</div>
                    <div id="linregValue" class="indicator-value">0.00</div>
                </div>
                <div class="indicator-card">
                    <div class="indicator-label">Pearson R</div>
                    <div id="pearsonValue" class="indicator-value">0.00</div>
                </div>
                <div class="indicator-card">
                    <div class="indicator-label">BB Position</div>
                    <div id="bbValue" class="indicator-value">0.00</div>
                </div>
                <div class="indicator-card">
                    <div class="indicator-label">Stoch %K</div>
                    <div id="stochValue" class="indicator-value">0</div>
                </div>
            </div>
        </div>

        <!-- Condizioni Base -->
        <div class="panel">
            <div class="title">✅ CONDIZIONI BASE</div>
            <div class="conditions-section">
                <div class="condition-item">
                    <span>LinReg in Zona Critica</span>
                    <div>
                        <span id="linregStatus" class="status-indicator status-inactive">INATTIVO</span>
                        <span id="linregCheck">❌</span>
                    </div>
                </div>
                <div class="condition-item">
                    <span>Pearson R Valido (≥0.75)</span>
                    <div>
                        <span id="pearsonStatus" class="status-indicator status-inactive">INATTIVO</span>
                        <span id="pearsonCheck">❌</span>
                    </div>
                </div>
                <div class="condition-item">
                    <span>Indicatori Secondari (≥2)</span>
                    <div>
                        <span id="secondaryStatus" class="status-indicator status-inactive">INATTIVO</span>
                        <span id="secondaryCheck">0/2</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Timer OK -->
        <div class="panel">
            <div class="title">⏱️ TIMER OK</div>
            <div class="timer-section">
                <div style="font-size: 16px; margin-bottom: 10px;">
                    <span id="timerStatus">NESSUN OK</span>
                </div>
                <div class="timer-bar">
                    <div id="timerFill" class="timer-fill" style="width: 0%;"></div>
                </div>
                <div style="font-size: 14px;">
                    Progresso: <span id="timerProgress">0/6</span>
                </div>
            </div>

            <div class="stats-section">
                <div class="title">📈 STATS TIMER</div>
                <div class="stats-grid">
                    <div class="stat-item">
                        <div style="font-size: 12px; opacity: 0.8;">Ultimo Segnale</div>
                        <div id="lastSignalTime">--</div>
                    </div>
                    <div class="stat-item">
                        <div style="font-size: 12px; opacity: 0.8;">Tipo</div>
                        <div id="lastSignalType">--</div>
                    </div>
                    <div class="stat-item">
                        <div style="font-size: 12px; opacity: 0.8;">Barre Trascorse</div>
                        <div id="barsElapsed">0</div>
                    </div>
                    <div class="stat-item">
                        <div style="font-size: 12px; opacity: 0.8;">Barre Rimanenti</div>
                        <div id="barsRemaining">6</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Indicatori Secondari -->
        <div class="panel">
            <div class="title">🔍 INDICATORI SECONDARI</div>
            <div class="secondary-indicators">
                <div class="secondary-item">
                    <span>MACD</span>
                    <span id="macdStatus">NEUTRO</span>
                </div>
                <div class="secondary-item">
                    <span>Momentum</span>
                    <span id="momentumStatus">NEUTRO</span>
                </div>
                <div class="secondary-item">
                    <span>Trend</span>
                    <span id="trendStatus">NEUTRO</span>
                </div>
                <div class="secondary-item">
                    <span>Price Action</span>
                    <span id="paStatus">NEUTRO</span>
                </div>
            </div>
        </div>

        <!-- Pattern Rilevati -->
        <div class="panel">
            <div class="title">🎯 PATTERN RILEVATI</div>
            <div id="patternList" class="pattern-list">
                <div class="pattern-item pattern-neutral">
                    <span>Nessun pattern rilevato</span>
                    <span>--</span>
                </div>
            </div>
        </div>
    </div>

    <div class="timestamp">
        Ultimo aggiornamento: <span id="lastUpdate">--:--:--</span>
    </div>

    <script>
        // ========== TRADING LOGIC IMPLEMENTATION ==========
        
        class TradingIndicators {
            constructor() {
                this.data = [];
                this.currentBar = 0;
                this.lastSignalBar = null;
                this.lastSignalType = null;
                this.timerLength = 6;
                this.currentSymbol = 'BTCUSDT';
                this.binanceConnected = false;
                this.webSocket = null;
                this.autoRefreshInterval = null;
                
                // Parametri configurabili
                this.config = {
                    linregLength: 100,
                    linregSensitivity: 0.8,
                    minPearson: 0.75,
                    bbLength: 20,
                    bbMult: 2.0,
                    stochLength: 14,
                    stochOversold: 20,
                    stochOverbought: 80
                };
                
                this.generateSimulatedData();
                this.setupBinanceConnection();
            }
            
            setupBinanceConnection() {
                // Inizializza la connessione demo
                setTimeout(() => {
                    this.simulateBinanceConnection();
                }, 1000);
            }
            
            simulateBinanceConnection() {
                this.binanceConnected = true;
                this.updateConnectionStatus();
                this.startPriceUpdates();
            }
            
            updateConnectionStatus() {
                const dot = document.getElementById('connectionDot');
                const status = document.getElementById('connectionStatus');
                
                if (this.binanceConnected) {
                    dot.className = 'status-dot status-connected';
                    status.textContent = 'Connesso a Binance';
                } else {
                    dot.className = 'status-dot status-disconnected';
                    status.textContent = 'Disconnesso';
                }
            }
            
            startPriceUpdates() {
                // Simula aggiornamenti prezzo in tempo reale
                setInterval(() => {
                    this.updateMarketData();
                }, 2000);
            }
            
            updateMarketData() {
                if (!this.binanceConnected) return;
                
                // Simula dati di mercato
                const basePrice = this.data.length > 0 ? this.data[this.data.length - 1].close : 50000;
                const change = (Math.random() - 0.5) * basePrice * 0.02; // ±2% variazione
                const newPrice = Math.max(basePrice + change, 1);
                
                const priceChange24h = (Math.random() - 0.5) * 10; // ±10%
                const volume24h = Math.random() * 1000000000; // Volume casuale
                
                // Aggiorna UI
                document.getElementById('currentPrice').textContent = `$${newPrice.toFixed(2)}`;
                document.getElementById('priceChange24h').textContent = `${priceChange24h >= 0 ? '+' : ''}${priceChange24h.toFixed(2)}%`;
                document.getElementById('priceChange24h').style.color = priceChange24h >= 0 ? '#4CAF50' : '#f44336';
                document.getElementById('volume24h').textContent = `$${this.formatNumber(volume24h)}`;
                
                // Aggiorna dati per analisi
                this.addNewCandle(newPrice);
            }
            
            addNewCandle(price) {
                const lastCandle = this.data[this.data.length - 1];
                const variation = price * 0.01; // 1% di variazione per OHLC
                
                const newCandle = {
                    open: lastCandle ? lastCandle.close : price,
                    high: price + Math.random() * variation,
                    low: price - Math.random() * variation,
                    close: price,
                    volume: Math.random() * 1000000,
                    timestamp: Date.now()
                };
                
                // Mantieni solo gli ultimi 200 candles
                if (this.data.length >= 200) {
                    this.data.shift();
                } else {
                    this.currentBar++;
                }
                
                this.data.push(newCandle);
            }
            
            formatNumber(num) {
                if (num >= 1e9) return (num / 1e9).toFixed(1) + 'B';
                if (num >= 1e6) return (num / 1e6).toFixed(1) + 'M';
                if (num >= 1e3) return (num / 1e3).toFixed(1) + 'K';
                return num.toFixed(0);
            }
            
            generateSimulatedData() {
                // Genera dati simulati iniziali basati sul simbolo
                this.data = [];
                let basePrice = this.getBasePriceForSymbol(this.currentSymbol);
                
                for (let i = 0; i < 200; i++) {
                    const change = (Math.random() - 0.5) * basePrice * 0.03;
                    basePrice = Math.max(basePrice + change, 1);
                    
                    this.data.push({
                        open: basePrice - Math.random() * basePrice * 0.01,
                        high: basePrice + Math.random() * basePrice * 0.02,
                        low: basePrice - Math.random() * basePrice * 0.02,
                        close: basePrice,
                        volume: Math.random() * 1000000,
                        timestamp: Date.now() - (200 - i) * 60000
                    });
                }
                
                this.currentBar = this.data.length - 1;
            }
            
            getBasePriceForSymbol(symbol) {
                const prices = {
                    'BTCUSDT': 45000,
                    'ETHUSDT': 2800,
                    'BNBUSDT': 320,
                    'ADAUSDT': 0.45,
                    'XRPUSDT': 0.52,
                    'SOLUSDT': 98,
                    'DOTUSDT': 6.2,
                    'DOGEUSDT': 0.08,
                    'AVAXUSDT': 28,
                    'MATICUSDT': 0.85,
                    'LTCUSDT': 72,
                    'ATOMUSDT': 9.8
                };
                return prices[symbol] || 100;
            }
            
            // Calcolo Regressione Lineare
            calculateLinearRegression(length = this.config.linregLength) {
                if (this.data.length < length) return { position: 0, pearsonR: 0 };
                
                const startIdx = Math.max(0, this.currentBar - length + 1);
                const prices = this.data.slice(startIdx, this.currentBar + 1).map(d => d.close);
                
                let sumX = 0, sumY = 0, sumXY = 0, sumXX = 0, sumYY = 0;
                const n = prices.length;
                
                for (let i = 0; i < n; i++) {
                    const x = i;
                    const y = prices[i];
                    sumX += x;
                    sumY += y;
                    sumXY += x * y;
                    sumXX += x * x;
                    sumYY += y * y;
                }
                
                const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);
                const intercept = (sumY - slope * sumX) / n;
                
                // Calcolo Pearson R
                const meanX = sumX / n;
                const meanY = sumY / n;
                let numerator = 0, denomX = 0, denomY = 0;
                
                for (let i = 0; i < n; i++) {
                    const devX = i - meanX;
                    const devY = prices[i] - meanY;
                    numerator += devX * devY;
                    denomX += devX * devX;
                    denomY += devY * devY;
                }
                
                const pearsonR = numerator / Math.sqrt(denomX * denomY);
                
                // Calcolo posizione normalizzata
                const currentPrice = prices[n - 1];
                const regressionPrice = intercept + slope * (n - 1);
                const stdDev = this.calculateStdDev(prices, regressionPrice, slope);
                const position = stdDev > 0 ? Math.max(-1, Math.min(1, (currentPrice - regressionPrice) / stdDev)) : 0;
                
                return { position, pearsonR, slope, intercept, stdDev };
            }
            
            calculateStdDev(prices, intercept, slope) {
                let sumSquares = 0;
                for (let i = 0; i < prices.length; i++) {
                    const expected = intercept + slope * i;
                    const diff = prices[i] - expected;
                    sumSquares += diff * diff;
                }
                return Math.sqrt(sumSquares / prices.length);
            }
            
            // Calcolo Bande di Bollinger
            calculateBollingerBands(length = this.config.bbLength, mult = this.config.bbMult) {
                if (this.data.length < length) return { position: 0, upper: 0, lower: 0, basis: 0 };
                
                const startIdx = Math.max(0, this.currentBar - length + 1);
                const prices = this.data.slice(startIdx, this.currentBar + 1).map(d => d.close);
                
                const sma = prices.reduce((sum, price) => sum + price, 0) / prices.length;
                const variance = prices.reduce((sum, price) => sum + Math.pow(price - sma, 2), 0) / prices.length;
                const stdDev = Math.sqrt(variance);
                
                const upper = sma + mult * stdDev;
                const lower = sma - mult * stdDev;
                const currentPrice = prices[prices.length - 1];
                const position = (currentPrice - lower) / (upper - lower) * 2 - 1; // -1 to +1
                
                return { position, upper, lower, basis: sma };
            }
            
            // Calcolo Stochastic RSI
            calculateStochasticRSI(length = this.config.stochLength) {
                if (this.data.length < length * 2) return { k: 50, d: 50 };
                
                // Calcola RSI
                const rsiValues = this.calculateRSI(length);
                if (rsiValues.length < length) return { k: 50, d: 50 };
                
                // Stochastic su RSI
                const recentRSI = rsiValues.slice(-length);
                const highestRSI = Math.max(...recentRSI);
                const lowestRSI = Math.min(...recentRSI);
                const currentRSI = recentRSI[recentRSI.length - 1];
                
                const k = highestRSI !== lowestRSI ? 
                    ((currentRSI - lowestRSI) / (highestRSI - lowestRSI)) * 100 : 50;
                
                // Semplificato: D è media mobile di K
                const d = k; // Per semplicità
                
                return { k, d };
            }
            
       					
	calculateRSI(length = 14) {
    const rsiValues = [];
    if (this.data.length < length + 1) return rsiValues;
    
    for (let i = length; i <= this.currentBar; i++) {
        let gains = 0, losses = 0;
        
        // Calcola guadagni e perdite per il periodo
        for (let j = i - length + 1; j <= i; j++) {
            if (j > 0) {
                const change = this.data[j].close - this.data[j - 1].close;
                if (change > 0) {
                    gains += change;
                } else {
                    losses += Math.abs(change);
                }
            }
        }
        
        // Calcola medie
        const avgGain = gains / length;
        const avgLoss = losses / length;
        
        // Calcola RSI
        if (avgLoss === 0) {
            rsiValues.push(100);
        } else {
            const rs = avgGain / avgLoss;
            const rsi = 100 - (100 / (1 + rs));
            rsiValues.push(rsi);
        }
    }
    
    return rsiValues;
}

// Calcolo Moving Average
calculateMA(length = this.config.maLength, type = 'SMA') {
    if (this.data.length < length) return 0;
    
    const prices = this.data.slice(Math.max(0, this.currentBar - length + 1), this.currentBar + 1)
                            .map(candle => candle.close);
    
    if (type === 'EMA') {
        return this.calculateEMA(prices, length);
    } else {
        // SMA (Simple Moving Average)
        return prices.reduce((sum, price) => sum + price, 0) / prices.length;
    }
}

calculateEMA(prices, length) {
    if (prices.length === 0) return 0;
    if (prices.length === 1) return prices[0];
    
    const multiplier = 2 / (length + 1);
    let ema = prices[0];
    
    for (let i = 1; i < prices.length; i++) {
        ema = (prices[i] * multiplier) + (ema * (1 - multiplier));
    }
    
    return ema;
}

// Calcolo MACD
calculateMACD(fast = 12, slow = 26, signal = 9) {
    if (this.data.length < slow) return { macd: 0, signal: 0, histogram: 0 };
    
    // Calcola EMA veloce e lenta
    const fastEMA = this.calculateEMAFromData(fast);
    const slowEMA = this.calculateEMAFromData(slow);
    
    // MACD Line
    const macd = fastEMA - slowEMA;
    
    // Signal Line (EMA del MACD)
    const signalLine = this.calculateSignalEMA(macd, signal);
    
    // Histogram
    const histogram = macd - signalLine;
    
    return { macd, signal: signalLine, histogram };
}

calculateEMAFromData(length) {
    if (this.data.length < length) return 0;
    
    const prices = this.data.slice(0, this.currentBar + 1).map(candle => candle.close);
    const multiplier = 2 / (length + 1);
    let ema = prices[0];
    
    for (let i = 1; i < prices.length; i++) {
        ema = (prices[i] * multiplier) + (ema * (1 - multiplier));
    }
    
    return ema;
}

calculateSignalEMA(macdValue, length) {
    // Versione semplificata - in un'implementazione completa 
    // dovresti mantenere uno storico dei valori MACD
    return macdValue * 0.8; // Approssimazione
}

// Identificazione pattern candlestick
identifyPattern() {
    if (this.currentBar < 2) return 'none';
    
    const current = this.data[this.currentBar];
    const previous = this.data[this.currentBar - 1];
    const beforePrevious = this.data[this.currentBar - 2];
    
    // Hammer/Doji patterns
    if (this.isHammer(current)) return 'hammer';
    if (this.isDoji(current)) return 'doji';
    if (this.isEngulfing(previous, current)) return 'engulfing';
    if (this.isMorningStar(beforePrevious, previous, current)) return 'morning_star';
    if (this.isEveningStar(beforePrevious, previous, current)) return 'evening_star';
    
    return 'none';
}

isHammer(candle) {
    const body = Math.abs(candle.close - candle.open);
    const lowerShadow = Math.min(candle.open, candle.close) - candle.low;
    const upperShadow = candle.high - Math.max(candle.open, candle.close);
    
    return lowerShadow > body * 2 && upperShadow < body * 0.5;
}

isDoji(candle) {
    const body = Math.abs(candle.close - candle.open);
    const range = candle.high - candle.low;
    
    return body < range * 0.1; // Body è meno del 10% del range
}

isEngulfing(prev, current) {
    const prevBullish = prev.close > prev.open;
    const currentBullish = current.close > current.open;
    
    // Pattern engulfing: candle corrente "ingloba" la precedente
    return (prevBullish !== currentBullish) &&
           (current.open < Math.min(prev.open, prev.close)) &&
           (current.close > Math.max(prev.open, prev.close));
}

isMorningStar(first, second, third) {
    // Pattern rialzista a 3 candele
    return (first.close < first.open) && // Prima ribassista
           (Math.abs(second.close - second.open) < (first.open - first.close) * 0.5) && // Seconda piccola
           (third.close > third.open) && // Terza rialzista
           (third.close > (first.open + first.close) / 2); // Terza chiude sopra metà della prima
}

isEveningStar(first, second, third) {
    // Pattern ribassista a 3 candele
    return (first.close > first.open) && // Prima rialzista
           (Math.abs(second.close - second.open) < (first.close - first.open) * 0.5) && // Seconda piccola
           (third.close < third.open) && // Terza ribassista
           (third.close < (first.open + first.close) / 2); // Terza chiude sotto metà della prima
}